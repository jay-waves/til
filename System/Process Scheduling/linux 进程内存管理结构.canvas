{
	"nodes":[
		{"id":"87a6857b448631f4","type":"text","text":"## files_struct\n\n```c\nstruct files_struct {\n\tstruct fdtable *fdt;\n}\n\nstruct fdtable {\n\tstruct file **fd;\n}\n```\n\n```c\nstruct file {\n\tstruct file_operations *f_op;\n\tstruct inode *f_inode;\n\tstruct address_space *f_mapping;\n}\n\nstruct socket {\n\n}\n```","x":577,"y":-340,"width":783,"height":540},
		{"id":"f40782ccb18bbd68","type":"text","text":"## task_struct\n\n```c\nstruct task_struct {\n\tpid_t                pid;   /* process id */\n\tpid_t                tgid;\n\tlong                 state; /* process state */\n\tvoid                *stack; /* stack pointer */\n\tint                  prio, static_prio;\n\tstruct files_struct *files; /* files opened by thread. */\n\tstruct mm_struct    *mm;\n```\n\nlinux 中线程和进程本质都是 task, 区别在于共享的资源不同.\n","x":-640,"y":-340,"width":660,"height":320},
		{"id":"3c91c28939b0ebcf","type":"text","text":"## vm_area_struct \n\n描述一个连续的内存区域 (VMA, Virtual Memory Area), 一个进程的虚拟内存空间由多个 VMA 构成.\n\n```c\nstruct vm_area_struct {\n\n\tstruct mm_struct *vm_mm;\t/* The address space we belong to. */\n\t\n\tunsigned long vm_start;   /* Our start address within vm_mm. */\n\tunsigned long vm_end;     /* The first byte after our end address within vm_mm. */\n\t\n\t/* linked list of VM areas per task, sorted by address, for quick iteration */\n\tstruct vm_area_struct *vm_next, *vm_prev;\n\n\t/* Red-Black Tree of VMAs per task, sorted by address, \n\t * for quick search and insert \n\t * early version of kernel uses AVL tree.\n\t*/\n\tstruct rb_node vm_rb; \n\t\n\t/* for areas with inode, the circular list inode -> i_mmap */\n\t/* for shm areas, the circular list of attaches */\n\t/* otherwise unused */\n\tstruct vm_area_struct *vm_next_share;\n\tstruct vm_area_struct *vm_prev_share;\n\n\t/*\n\t * Access permissions of this VMA.\n\t */\n\tpgprot_t vm_page_prot;\n\tunsigned long vm_flags; \n\tunsigned long vm_offset;\n\tstruct inode *vm_inode;\n\n\tunsigned long vm_pte; /* shared memory */\n\t\n\tstruct anon_vma *anon_vma;  /* Serialized by page_table_lock */\n\tstruct list_head anon_vma_chain; \n\t\n\tstruct file * vm_file;      /* File we map to (can be NULL). */\n\tunsigned long vm_pgoff;     /* Offset (within vm_file) in PAGE_SIZE\n\t\t\t\t\t\t\t\t\t\t units */ \n\tvoid * vm_private_data;     /* was vm_pte (shared mem) */\n\t\n\t/* Function pointers to deal with this struct. */\n\tconst struct vm_operations_struct {\n\t\tvoid (*open)(struct vm_area_struct *area);\n\t\tvoid (*close)(struct vm_area_struct *area);\n\t\tvm_fault (*fault)(struct vm_fault *vmf);\n\t\t...\n\t}*vm_ops;\n}\n```\n\n\n### vm_flags\n\n| vm_flags | control |\n| --- | --- |\n| `VM_READ` | 可读 |\n| `VM_WRITE` | 可写 |\n| `VM_EXEC` | 可执行 |\n| `VM_SHAR` | 可多进程间共享 |\n| `VM_IO` | 可映射至设备 IO 空间 |\n| `VM_RESERVED` | 内存区域不可被换出 |\n| `VM_SEQ_READ` | 内存区域可能被顺序访问 |\n|`VM_RAND_READ` | 内存区域可能被随机访问 |\n\n如代码段的标志为 `VM_READ & VM_EXEC`","x":-840,"y":800,"width":785,"height":1380},
		{"id":"b839a3d3ed40cdd0","type":"text","text":"## page\n\n```c\nstruct page {\n\tunsigned long flags;\n\tstruct address_space *maaping;\n\tpgoff_t index;\n\tstruct list_head lru;\n\tvoid *virtual;\n}\n```","x":222,"y":878,"width":638,"height":382},
		{"id":"8dc181ef6c03166c","type":"text","text":"## zone\n\n```c\nstruct zone {\n\tstruct zone_lru {\n\t\tstruct list_head list;\n\t\tunsigned long nr_saved_scan;\n\t} lru[NR_LRU_LISTS];\n\n\tunsigned long pages_scanned;\n\t...\n}\n```\n","x":533,"y":1437,"width":627,"height":363},
		{"id":"e064e255f50f8d52","type":"text","text":"## address_space\n\n```c\nstruct address_space {\n\tstruct inode *host;\n\tstruct radix_tree_root page_tree;\n\tunsigned long nrpages;\n\tstruct addres_space_operations *a_ops;\n}\n\nstruct inode {\n}\n```","x":640,"y":363,"width":493,"height":377},
		{"id":"2c4b4b1862f492e3","type":"text","text":"## mm_struct\n\n描述一个进程的整个虚拟空间.\n\n```c\n// in include/linux/mm_types.h\nstruct mm_struct {\n\tint            count;\n\tpgd_t         *pgd;\n\tunsigned long  context;\n\tunsigned long  task_size; /* size of task vm space */\n\n\tunsigned long start_code, end_code; /* code */\n\tunsigned long start_data, end_data; /* data */\n\tunsigned long start_brk, brk;       /* heap */\n\tunsigned long start_stack;          /* stack */\n\t/* note stack top pointer is in sp register */\n\n\t/* pages count */\n\tunsigned long total_vm;    /* total pages mapped */\n\tunsigned long locked_vm;   /* pages cannot swapped out */\n\tunsigned long pinned_vm;   /* pages cannot swapped out or moved */\n\tunsigned long data_vm;       /* VM_WRITE & ~VM_SHARE & ~VM_STACK */\n\tunsigned long exec_vm;       /* VM_EXEC & ~VM_WRITE & ~VM_STACK */\n\tunsigned long stack_vm;      /* VM_STACK */\n\n\tunsigned long mmap_base;            /* base of mmap area */\n\tstruct vm_area_struct *mmap; /* mmap, list head of VMAs */\n\tstruct rb_root *mm_rb;       /* root for red-black tree of VMAs */\n\tstruct list_head mmlist;    \n\n}\n```\n\n> `unsigned long` 在 64 位机器上为 64 位, 在 32 位机器上表现为 32 位.   \n> 适合用于标识地址.","x":-140,"y":200,"width":720,"height":620}
	],
	"edges":[
		{"id":"c34f57d8c9653de7","fromNode":"f40782ccb18bbd68","fromSide":"bottom","toNode":"2c4b4b1862f492e3","toSide":"top","label":"memory map"},
		{"id":"faa83c49b033fbe9","fromNode":"3c91c28939b0ebcf","fromSide":"top","toNode":"2c4b4b1862f492e3","toSide":"left","label":"vm_mm"},
		{"id":"00a3f7420b0880e7","fromNode":"f40782ccb18bbd68","fromSide":"right","toNode":"87a6857b448631f4","toSide":"left","label":"files opened"},
		{"id":"759f6b88f76c5200","fromNode":"87a6857b448631f4","fromSide":"bottom","toNode":"e064e255f50f8d52","toSide":"top"}
	]
}